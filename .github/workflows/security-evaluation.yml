stages:
  - security_check

security_evaluation:
  stage: security_check
  image: python:3.9-slim
  
  variables:
    API_BASE_URL: "https://api.aginiti.com/api/v1"
    RISK_THRESHOLD: "50.0"
  
  before_script:
    - pip install requests
  
  script:
    - |
      python3 << 'EOF'
      import requests
      import time
      import json
      import os
      import sys

      API_BASE_URL = os.environ.get("API_BASE_URL")
      API_KEY = os.environ.get("AGINITI_API_KEY")
      USER_ID = os.environ.get("AGINITI_USER_ID")
      REPO_URL = os.environ.get("CI_REPOSITORY_URL")
      RISK_THRESHOLD = float(os.environ.get("RISK_THRESHOLD", "50.0"))
      
      # OWASP categories to evaluate
      OWASP_CATEGORIES = [
          "prompt-injection",
          "insecure-output-handling",
          "sensitive-information-disclosure",
          "unbounded-consumption",
          "misinformation",
          "system-prompt-leakage",
          "data-and-model-poisoning",
          "vector-and-embedding-weaknesses",
          "excessive-agency",
          "agent-to-agent"
      ]

      if not API_KEY or not USER_ID:
          print("‚ùå ERROR: AGINITI_API_KEY and AGINITI_USER_ID must be set as CI/CD variables")
          sys.exit(1)

      print("üîç Starting security evaluation...")
      print(f"Repository: {REPO_URL}")
      print(f"User ID: {USER_ID}")
      print(f"Risk Threshold: {RISK_THRESHOLD}")
      print(f"Categories to evaluate: {', '.join(OWASP_CATEGORIES)}")
      
      # Start evaluation
      # Build form data with multiple owasp_top_10 fields
      payload = {
          "user_id": USER_ID,
          "github_link": REPO_URL,
          "use_llm": "true",
          "api_key": API_KEY
      }
      
      # Add each OWASP category as a separate form field
      form_data = []
      for key, value in payload.items():
          form_data.append((key, value))
      
      for category in OWASP_CATEGORIES:
          form_data.append(("owasp_top_10", category))

      try:
          print("\nüì§ Submitting evaluation request...")
          response = requests.post(
              f"{API_BASE_URL}/evaluate",
              data=payload,
              headers=headers,
              timeout=30
          )
          response.raise_for_status()
          
          result = response.json()
          job_id = result.get("job_id")
          
          if not job_id:
              print("‚ùå ERROR: No job ID returned from API")
              sys.exit(1)
          
          print(f"‚úÖ Evaluation started with job ID: {job_id}")
          
          # Poll for results
          print("\n‚è≥ Waiting for evaluation to complete...")
          max_wait_time = 1800  # 30 minutes
          poll_interval = 15
          elapsed_time = 0
          
          while elapsed_time < max_wait_time:
              time.sleep(poll_interval)
              elapsed_time += poll_interval
              
              status_response = requests.get(
                  f"{API_BASE_URL}/evaluation_status/{job_id}",
                  params={"user_id": USER_ID},
                  timeout=30
              )
              status_response.raise_for_status()
              
              status_data = status_response.json()
              status = status_data.get("status")
              
              if status == "completed":
                  # Check if this is a premature completion (0% or no real results)
                  progress_str = status_data.get("progress", "0%")
                  progress_num = int(progress_str.rstrip('%'))
                  
                  # Handle both response formats
                  if "results" in status_data:
                      results_wrapper = status_data.get("results", {})
                      if "results" in results_wrapper:
                          results = results_wrapper.get("results", {})
                      else:
                          results = results_wrapper
                  else:
                      results = {}
                  
                  summary = results.get("summary", {})
                  
                  # If progress is less than 100% or no issues found yet, keep waiting
                  if progress_num < 100 and summary.get("total_issues", 0) == 0 and elapsed_time < max_wait_time:
                      print(f"‚ö†Ô∏è  Evaluation marked complete but progress is {progress_str} - continuing to wait...")
                      continue
                  
                  print("‚úÖ Evaluation completed!")
                  results = status_data.get("results", {}).get("results", {})
                  summary = results.get("summary", {})
                  
                  risk_score = summary.get("risk_score", 0)
                  total_issues = summary.get("total_issues", 0)
                  high_risk = summary.get("high_risk_issues", 0)
                  medium_risk = summary.get("medium_risk_issues", 0)
                  low_risk = summary.get("low_risk_issues", 0)
                  business_impact = summary.get("business_impact", "Unknown")
                  
                  print("\n" + "="*60)
                  print("üìä SECURITY EVALUATION RESULTS")
                  print("="*60)
                  print(f"Risk Score: {risk_score}/100")
                  print(f"Total Issues: {total_issues}")
                  print(f"  - High Risk: {high_risk}")
                  print(f"  - Medium Risk: {medium_risk}")
                  print(f"  - Low Risk: {low_risk}")
                  print(f"Business Impact: {business_impact}")
                  print("="*60)
                  
                  # Display security evaluations
                  security_evals = results.get("security_evaluations", [])
                  if security_evals:
                      print("\nüîç Detected Issues by Category:")
                      for eval_item in security_evals:
                          category = eval_item.get("category", "Unknown")
                          issues = eval_item.get("issues", [])
                          if issues:
                              print(f"\n  üìå {category.upper()}:")
                              for issue in issues:
                                  if issue.get("found", False):
                                      print(f"    - {issue.get('issue', 'Unknown issue')}")
                                      print(f"      Risk: {issue.get('risk_level', 'unknown')}")
                                      print(f"      File: {issue.get('file', 'unknown')}")
                                      if issue.get('recommendation'):
                                          print(f"      Fix: {issue.get('recommendation', 'N/A')}")
                  
                  # Save results as artifact
                  with open('security_evaluation_results.json', 'w') as f:
                      json.dump(status_data, f, indent=2)
                  print("\nüíæ Results saved to security_evaluation_results.json")
                  
                  # Check if risk score exceeds threshold
                  if risk_score > RISK_THRESHOLD:
                      print(f"\n‚ùå FAILED: Risk score ({risk_score}) exceeds threshold ({RISK_THRESHOLD})")
                      print("üö´ Merge blocked due to security concerns")
                      sys.exit(1)
                  else:
                      print(f"\n‚úÖ PASSED: Risk score ({risk_score}) is within acceptable threshold ({RISK_THRESHOLD})")
                      print("‚úÖ Security evaluation passed - code can be merged")
                      sys.exit(0)
              
              elif status == "failed":
                  error_msg = status_data.get("message", "Unknown error")
                  print(f"‚ùå Evaluation failed: {error_msg}")
                  sys.exit(1)
              
              elif status in ["running", "pending"]:
                  progress = status_data.get("progress", "0%")
                  print(f"‚è≥ Status: {status} ({progress}) - elapsed time: {elapsed_time}s")
              
              else:
                  print(f"‚ö†Ô∏è  Unknown status: {status}")
          
          print("‚ùå Evaluation timed out")
          sys.exit(1)
          
      except requests.exceptions.RequestException as e:
          print(f"‚ùå API request failed: {str(e)}")
          sys.exit(1)
      except Exception as e:
          print(f"‚ùå Unexpected error: {str(e)}")
          import traceback
          traceback.print_exc()
          sys.exit(1)
      EOF
  
  artifacts:
    reports:
      junit: security_evaluation_results.json
    paths:
      - security_evaluation_results.json
    expire_in: 30 days
    when: always
  
  only:
    - merge_requests
    - main
    - master
  
  retry:
    max: 2
    when:
      - api_failure
      - runner_system_failure