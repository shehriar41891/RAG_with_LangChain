name: Security Evaluation Check

on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master

jobs:
  security-evaluation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install requests

      - name: Run Security Evaluation
        id: security_check
        run: |
          python << 'EOF'
          import requests
          import time
          import json
          import os
          import sys

          API_BASE_URL = "https://api.aginiti.com/api/v1"
          API_KEY = "7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d"
          USER_ID = "Shehriar101105"
          REPO_URL = f"https://github.com/{os.environ.get('GITHUB_REPOSITORY')}"
          RISK_THRESHOLD = 50.0
          
          # Test with just one category
          OWASP_CATEGORIES = ["insecure-output-handling"]

          print(f"Repository: {REPO_URL}")
          print(f"Testing category: {OWASP_CATEGORIES[0]}")
          
          # Build form data
          form_data = [
              ("user_id", USER_ID),
              ("github_link", REPO_URL),
              ("use_llm", "true"),
              ("api_key", API_KEY),
              ("owasp_top_10", OWASP_CATEGORIES[0])
          ]

          try:
              # Start evaluation
              print("\nStarting evaluation...")
              resp = requests.post(f"{API_BASE_URL}/evaluate", data=form_data, timeout=30)
              resp.raise_for_status()
              job_id = resp.json().get("job_id")
              print(f"Job ID: {job_id}")
              
              # Poll for completion - 3 minute max
              max_wait = 180
              poll_interval = 15
              elapsed = 0
              
              while elapsed < max_wait:
                  time.sleep(poll_interval)
                  elapsed += poll_interval
                  
                  status_resp = requests.get(
                      f"{API_BASE_URL}/evaluation_status/{job_id}",
                      params={"user_id": USER_ID},
                      timeout=20
                  )
                  status_resp.raise_for_status()
                  data = status_resp.json()
                  
                  status = data.get("status", "unknown")
                  progress = data.get("progress", "0%")
                  
                  print(f"{status} | {progress} | {elapsed}s")
                  
                  if status == "completed":
                      # Extract results
                      results = data.get("results", {})
                      if "results" in results:
                          results = results["results"]
                      
                      summary = results.get("summary", {})
                      security_evals = results.get("security_evaluations", [])
                      
                      risk_score = summary.get("risk_score", 0)
                      total_issues = summary.get("total_issues", 0)
                      high_risk = summary.get("high_risk_issues", 0)
                      medium_risk = summary.get("medium_risk_issues", 0)
                      low_risk = summary.get("low_risk_issues", 0)
                      
                      print(f"\nRisk Score: {risk_score}/100")
                      print(f"Issues: {total_issues} (High: {high_risk}, Medium: {medium_risk}, Low: {low_risk})")
                      
                      # Show issues
                      if security_evals:
                          for eval_item in security_evals:
                              issues = eval_item.get("issues", [])
                              found = [i for i in issues if i.get("found")]
                              if found:
                                  print(f"\nFound {len(found)} issue(s):")
                                  for issue in found:
                                      print(f"  - {issue.get('issue', 'Unknown')}")
                                      print(f"    Risk: {issue.get('risk_level', 'unknown')}")
                                      print(f"    File: {issue.get('file', 'unknown')}")
                      
                      # Exit based on threshold
                      if risk_score > RISK_THRESHOLD:
                          print(f"\nFAILED: Risk {risk_score} > {RISK_THRESHOLD}")
                          sys.exit(1)
                      else:
                          print(f"\nPASSED: Risk {risk_score} <= {RISK_THRESHOLD}")
                          sys.exit(0)
                  
                  elif status == "failed":
                      print(f"Evaluation failed: {data.get('message', 'Unknown')}")
                      sys.exit(1)
              
              print(f"\nTimeout after {elapsed}s")
              sys.exit(1)
              
          except Exception as e:
              print(f"Error: {e}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          EOF

      - name: Comment on PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Security evaluation failed. [View details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
            })